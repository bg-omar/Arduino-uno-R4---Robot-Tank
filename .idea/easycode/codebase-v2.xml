<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/animation.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/avoid_objects.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/avoid_objects.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/barometer.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/barometer.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/compass.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/compass.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/config.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/dancing.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/dancing.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/displayAdafruit.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/displayAdafruit.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/displayU8G2.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/displayU8G2.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/follow_light.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/follow_light.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/gyroscope.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/gyroscope.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/I2Cscanner.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/I2Cscanner.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/index.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/IRreceiver.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/IRreceiver.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/main_ra.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/main_ra.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/motor.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/motor.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/pesto_matrix.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/pesto_matrix.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/PS4.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/PS4.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/pwm_board.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/pwm_board.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/timers.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src/timers.h;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src_esp32/main_esp.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src_esp32_cam/handlers.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src_esp32_cam/main.cpp;C:/Users/mr/Arduino-R4_UNO_Wall-Z/src_esp32_ps4/main_ps4.cpp" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/mr/Arduino-R4_UNO_Wall-Z&quot;:&quot;{\&quot;/src/barometer.cpp\&quot;:\&quot;\\nvoid barometer::baroSetup() {\\r\\nvoid barometer::baroMeter() {\\r\&quot;,\&quot;/src/avoid_objects.h\&quot;:\&quot;\\n  class avoid_objects {\\r\&quot;,\&quot;/src/follow_light.cpp\&quot;:\&quot;\\ndouble Follow_light::lightSensor(){\\r\\nint Follow_light::exitLoop() {\\r\\nvoid Follow_light::light_track() {\\r\&quot;,\&quot;/src/displayAdafruit.h\&quot;:\&quot;\\n  class displayAdafruit {\\r\&quot;,\&quot;/src/pesto_matrix.h\&quot;:\&quot;\\n  class Pesto {\\r\&quot;,\&quot;/src/timers.cpp\&quot;:\&quot;\\nvoid timers::initTimers() {\\r\\nvoid timers::update(){\\r\\nvoid timers::sensorTimer(){\\r\\nvoid timers::resetTimers(){\\r\\nvoid timers::mouthTimer(){\\r\&quot;,\&quot;/src_esp32_ps4/main_ps4.cpp\&quot;:\&quot;\\nvoid notify() {\\r\\nvoid setup() {\\r\\nvoid loop() {\\r\&quot;,\&quot;/src/motor.cpp\&quot;:\&quot;\\nvoid Motor::Car_front(){\\r\\nvoid Motor::Car_left(){\\r\\nvoid Motor::Car_right(){\\r\\nvoid Motor::Car_Stop(){\\r\\nvoid Motor::Car_Back(){\\r\\nvoid Motor::motor_setup() {\\r\&quot;,\&quot;/src/IRreceiver.cpp\&quot;:\&quot;\\nvoid IRreceiver::setupIrRemote() {\\r\\nvoid IRreceiver::irRemote() {\\r\&quot;,\&quot;/boards/esp32_uno_r4.json\&quot;:\&quot;\&quot;,\&quot;/src/pwm_board.h\&quot;:\&quot;\\n  class pwm_board {\\r\&quot;,\&quot;/src/main_ra.h\&quot;:\&quot;\&quot;,\&quot;/src/motor.h\&quot;:\&quot;\\n  class Motor {\\r\&quot;,\&quot;/src_esp32_cam/handlers.cpp\&quot;:\&quot;\\nstatic void\\r\\nstatic void\\r\\nvoid\\r\&quot;,\&quot;/src/I2Cscanner.h\&quot;:\&quot;\&quot;,\&quot;/keypad_4x4/Membrane_Switch_Module.cpp\&quot;:\&quot;\\nint main(){\&quot;,\&quot;/src/barometer.h\&quot;:\&quot;\&quot;,\&quot;/src/dancing.cpp\&quot;:\&quot;\\nint dancing::exitLoop() {\\r\\nvoid dancing::dance() {\\r\&quot;,\&quot;/src/PS4.h\&quot;:\&quot;\\n  class PS4 {\\r\&quot;,\&quot;/src/displayU8G2.h\&quot;:\&quot;\\n  class displayU8G2 {\\r\&quot;,\&quot;/src_esp32/main_esp.cpp\&quot;:\&quot;\\nsp_uno_r4_setup();\\r\\ncentral) {\\r\&quot;,\&quot;/keypad_4x4/Key.cpp\&quot;:\&quot;\\nvoid Key::key_update (char userKeyChar, KeyState userState, boolean userStatus) {\&quot;,\&quot;/src/follow_light.h\&quot;:\&quot;\\n  class Follow_light {\\r\&quot;,\&quot;/src/main_ra.cpp\&quot;:\&quot;\\nvoid main::log(const char *text) {\\nvoid main::logln(const char *text) {\\nvoid setup(){\\nvoid loop(){\&quot;,\&quot;/src/index.h\&quot;:\&quot;\\nfunction init() {\\r\\nfunction update_view(temp) {\\r\&quot;,\&quot;/src/config.h\&quot;:\&quot;\&quot;,\&quot;/src/I2Cscanner.cpp\&quot;:\&quot;\\nvoid I2Cscanner::scan() {\\r\&quot;,\&quot;/src/displayAdafruit.cpp\&quot;:\&quot;\\nvoid displayAdafruit::setupAdafruit(){\\r\\nvoid displayAdafruit::testdrawroundrect() {\\r\\nvoid displayAdafruit::testfillroundrect() {\\r\\nvoid displayAdafruit::testdrawchar() {\\r\\nvoid displayAdafruit::testdrawstyles() {\\r\\nvoid displayAdafruit::testscrolltext() {\\r\\nvoid displayAdafruit::displayLoop(){\\r\&quot;,\&quot;/src/gyroscope.cpp\&quot;:\&quot;\\nvoid gyroscope::gyroRead(){\\r\\nvoid gyroscope::gyroFunc(){\\r\\nvoid gyroscope::gyroDetectMovement() {\\r\\nvoid gyroscope::gyroCalibrate_sensor() {\\r\\nvoid gyroscope::gyroSetup() {\\r\&quot;,\&quot;/src/timers.h\&quot;:\&quot;\\n  class timers {\\r\&quot;,\&quot;/src/PS4.cpp\&quot;:\&quot;\\nint PS4::exitLoop() {\\r\\nvoid PS4::joystick(int Xinput, int Yinput) {\\r\\nsize_t find_operator(const std::string\\u0026 expression, size_t start_index \\u003d 0) {\\r\\nvector\\u003cint\\u003e extract_integers(const string\\u0026 expression){\\r\\nvoid PS4::controller() {\\r\&quot;,\&quot;/keypad_4x4/Keypad.cpp\&quot;:\&quot;\\nKeypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {\\nchar Keypad::getKey() {\\nbool Keypad::getKeys() {\\nvoid Keypad::scanKeys() {\\nbool Keypad::updateList() {\\nvoid Keypad::nextKeyState(byte idx, boolean button) {\\nbool Keypad::isPressed(char keyChar) {\\nint Keypad::findInList (char keyChar) {\\nint Keypad::findInList (int keyCode) {\\nchar Keypad::waitForKey() {\\nvoid Keypad::transitionTo(byte idx, KeyState nextState) {\\nvoid pin_mode(byte pinNum, byte mode) { \&quot;,\&quot;/src/avoid_objects.cpp\&quot;:\&quot;\\ndouble avoid_objects::checkDistance() {\\r\\nint avoid_objects::exitLoop() {\\r\\nvoid avoid_objects::avoid() {\\r\&quot;,\&quot;/src/gyroscope.h\&quot;:\&quot;\\n  class gyroscope {\\r\&quot;,\&quot;/src/IRreceiver.h\&quot;:\&quot;\\n  class IRreceiver {\\r\&quot;,\&quot;/src/dancing.h\&quot;:\&quot;\&quot;,\&quot;/src/animation.h\&quot;:\&quot;\&quot;,\&quot;/src/displayU8G2.cpp\&quot;:\&quot;\\nvoid displayU8G2::U8G2setup() {\\r\\nvoid displayU8G2::U8G2printEnd (){\\r\\nvoid displayU8G2::u8g2_prepare() {\\r\\nvoid displayU8G2::u8g2_box_title(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_box_frame(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_disc_circle(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_r_frame(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_string(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_line(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_triangle(uint8_t a) {\\r\\nvoid displayU8G2::u8g2_ascii_1() {\\r\\nvoid displayU8G2::u8g2_ascii_2() {\\r\\nvoid displayU8G2::u8g2_extra_page(uint8_t a)\\r\\nplayU8G2::u8g2_xor(uint8_t a) {\\r\\nplayU8G2::u8g2_bitmap_overlay(uint8_t a) {\\r\\nplayU8G2::u8g2_bitmap_modes(uint8_t transparent) {\\r\\nplayU8G2::draw() {\\r\&quot;,\&quot;/src/compass.cpp\&quot;:\&quot;\\ndouble compass::readCompass(){\\r\\nvoid compass::showCompass(){\\r\\nvoid compass::compassSetup() {\\r\&quot;,\&quot;/src_esp32_cam/main.cpp\&quot;:\&quot;\\n  static esp_err_t stream_handler(httpd_req_t *req){\\r\\n  void startCameraServer(){\\r\\nvoid setupWiFi() {\\r\&quot;,\&quot;/src/compass.h\&quot;:\&quot;\\n  class compass {\\r\&quot;,\&quot;/src/pesto_matrix.cpp\&quot;:\&quot;\\nvoid Pesto::IIC_start() {\\r\\nvoid Pesto::IIC_send(unsigned char send_data) {\\r\\nvoid Pesto::IIC_end() {\\r\\nvoid Pesto::matrix_display(unsigned char matrix_value[]) {\\r\\nvoid Pesto::pestoMatrix() {\\r\\nvoid Pesto::setup_pestoMatrix() {\\r\&quot;,\&quot;/src/pwm_board.cpp\&quot;:\&quot;\\nvoid pwm_board::setupPWM(){\\r\\nint pwm_board::pulseWidth(int angle){  //  pwm.setPWM(PWM_0, 0, pulseWidth(0));\\r\\nvoid pwm_board::RGBled(int r_val, int g_val, int b_val) {\\r\\nvoid pwm_board::leftLedStrip(int r_val, int g_val, int b_val) {\\r\\nvoid pwm_board::rightLedStrip(int r_val, int g_val, int b_val) {\\r\\nvoid  pwm_board::RainbowColor() {\\r\&quot;}&quot;}" />
  </component>
</project>